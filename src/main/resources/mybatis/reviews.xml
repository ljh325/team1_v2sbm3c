<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 주찬 xml   (o)표시: 수정 완료  -->
<!--

REVIEWNO    NUMBER(10)    NOT NULL, (리뷰번호)
STAR        NUMBER(5 )    NOT NULL, (별점)o
CONTENTS    VARCHAR2(1000)  NOT NULL, (내용)o
RDATE       DATE          NOT NULL, (등록일)o
UDATE       DATE              NULL, (수정일)o
MEMBERNO    NUMBER(10)    NOT NULL, (회원 번호)      (FK)
FOODCATENO  NUMBER(10)    NOT NULL, (푸드 카테고리번호) (FK)
리뷰
1. 리뷰 작성ㅇ
2. 수정, 삭제, 조회ㅇ
3. 전체 리뷰수ㅇ
4. 별점에 따른 리뷰 조회(별점 높은 순 , 낮은 순)ㅇ
5. 리뷰 키워드 검색 x (chat GPT)
6. 최근 작성순ㅇ
7. 오래된 작성순ㅇ
8. 사진 넣을 까 말까 x
-->
<mapper namespace="dev.mvc.review.ReviewDAOInter"> <!-- SB가 자동으로 구현하여 연동하는 interface -->

  <!-- 리뷰 등록 -->
  <insert id = "review_insert" parameterType="dev.mvc.review.ReviewVO">
    INSERT INTO review(reviewno, star, contents, rdate, udate, memberno)
    VALUES (review_seq.nextval, #{star}, #{contents}, sysdate, null, #{memberno})    
    <!--INSERT INTO REVIEW(REVIEWNO, STAR, CONTENTS, RDATE, UDATE, MEMBERNO, FOODCATENO)
    VALUES (REVIEW_seq.nextval, 2,'예시3',sysdate, null, 40, 3); 푸드카테고리번호 연결필수-->
  </insert>

  
   <!-- 리뷰 페이징 목록 -->
  <select id="list_by_review_paging" resultType="dev.mvc.review.ReviewVO" parameterType="HashMap">
   SELECT reviewno, star, contents, rdate, udate, r
   FROM (
              SELECT reviewno, star, contents, rdate, udate, rownum as r
              FROM (
                        SELECT reviewno, star, contents, rdate, udate
                        FROM review
                        ORDER BY reviewno DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
     
    <!-- 1 page: WHERE r >= 1 AND r <= 10; 
          2 page: WHERE r >= 11 AND r <= 20;
          3 page: WHERE r >= 21 AND r <= 30; -->
  </select>



  <!-- 전체 리뷰 수 -->
  <select id="review_cnt" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt
    FROM review
  </select>
  
  <!-- 넘버 리뷰번호 -->
  <select id="reviewno_max" resultType="int">
    SELECT MAX(reviewno) as cnt
    FROM review
  </select>
  
  <!-- 회원 리뷰 조회 -->
  <select id="review_read" resultType="dev.mvc.review.ReviewVO" parameterType="map">
    SELECT m.id, r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, m.memberno
    FROM review r, member m
    WHERE m.memberno = r.memberno AND r.memberno=#{memberno} AND r.reviewno=#{reviewno}
  </select>
  
  <!-- 리뷰 수정 | 수정일 확인 필요 -->
  <update id="review_update" parameterType="dev.mvc.review.ReviewVO">
    UPDATE review
    SET star=#{star}, contents=#{contents} , udate=sysdate 
    WHERE reviewno = #{reviewno}
  </update>
  
  <!-- 리뷰 삭제 -->
  <delete id="review_delete" parameterType="int">
    DELETE FROM review
    WHERE reviewno=#{reviewno}
  </delete>
  
  
  <!-- 별점에 따른 리뷰 조회(별점 높은 순) -->
  <select id="list_star_high" resultType="dev.mvc.review.ReviewVO" parameterType="int">
    SELECT m.id, r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, m.memberno
    FROM review r, member m
    WHERE m.memberno = r.memberno
    ORDER BY r.star DESC
  </select>
  
    <!-- 별점에 따른 리뷰 조회(별점 낮은 순) -->
  <select id="list_star_low" resultType="dev.mvc.review.ReviewVO" parameterType="int">
    SELECT m.id, r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, m.memberno
    FROM review r, member m
    WHERE m.memberno = r.memberno
    ORDER BY r.star ASC
  </select>
  <!-- 최근 작성순 -->
  <select id="recent_review" resultType="dev.mvc.review.ReviewVO">
    SELECT m.id, r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, m.memberno
    FROM review r, member m
    WHERE m.memberno = r.memberno
    ORDER BY COALESCE(r.udate, r.rdate) DESC
    <!-- COALESCE(A, B) -> update가 null이 아니면 update값 반환
    update가 널값이고 rdate가 값존재하면 rdate반환, 둘다 널이면 널값 반환 -->
  </select>
  
  <!-- 오래된 작성순 -->
  <select id="old_review" resultType="dev.mvc.review.ReviewVO">
    SELECT m.id, r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, m.memberno
    FROM review r, member m
    WHERE m.memberno = r.memberno
    ORDER BY COALESCE(r.udate, r.rdate) asc
  </select>
  
  
  
    <!-- 리뷰 총 평균 평점 -->
  <select id="avg_cnt" resultType="float">
    SELECT COALESCE(ROUND(AVG(star), 1) , 0) as avg
    FROM review
  </select>

    <!-- 별점당 갯수 -->
  <select id="star_cnt" parameterType="int" resultType="int">
    SELECT count(*)
    from review r, mebmer m
    where m.memberno = r.memberno;
  </select>


  <select id="admin_read_review" parameterType="string" resultType="dev.mvc.review.ReviewVO">
    SELECT k.keywordname, 
    r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, r.memberno,
    m.id, m.memberno, m.mname, m.nickname, m.profile, m.profilesaved, m.thumbs, m.sizes, m.grade
    FROM keyword k, review r, member m
    WHERE k.reviewno = r.reviewno AND r.memberno = m.memberno AND k.keywordname = #{keywordname} AND r.temperater = 2
  </select>
  
  
  <select id="admin_read_review_cold" parameterType="string" resultType="dev.mvc.review.ReviewVO">
    SELECT k.keywordname, 
    r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, r.memberno,
    m.id, m.memberno, m.mname, m.nickname, m.profile, m.profilesaved, m.thumbs, m.sizes, m.grade
    FROM keyword k, review r, member m
    WHERE k.reviewno = r.reviewno AND r.memberno = m.memberno AND  k.keywordname = #{keywordname} AND r.temperater = 1
  </select>
  
  
  <select id="admin_review_detail" parameterType="int" resultType="dev.mvc.review.ReviewVO">
    SELECT k.keywordname, 
    r.reviewno, r.star, r.contents, r.temperater, r.rdate, r.udate, r.memberno,
    m.id, m.memberno, m.mname, m.nickname, m.profile, m.profilesaved, m.thumbs, m.sizes, m.grade
    FROM keyword k, review r, member m
    WHERE k.reviewno = r.reviewno AND r.memberno = m.memberno AND r.reviewno = #{reviewno}
  </select>
  
  

</mapper>